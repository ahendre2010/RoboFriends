{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","Component","componentDidMount","this","onRequestRobots","render","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddelware","rootElement","document","getElementById","ReactDOM"],"mappings":"kQAceA,G,MAZF,EAAGC,OAAMC,QAAOC,QAEzB,yBAAKC,UAAU,oDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACE,4BAAKF,GACL,2BAAIC,MCaGK,EAlBE,EAAGC,YAGhB,kBAAC,WAAD,KACGA,EAAOC,IAAI,CAACC,EAAMC,IAEf,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,UCEdW,EAbG,EAAGC,kBAEjB,yBAAKV,UAAU,OACb,2BACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,KCGHI,EAVCC,GAEZ,yBACEC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAE/DJ,EAAMK,U,MCmBb,MAAMC,UAAYC,YAChBC,oBACEC,KAAKT,MAAMU,kBAGbC,SAAU,IAAD,EACoDF,KAAKT,MAAxDY,EADD,EACCA,YAAaC,EADd,EACcA,eAAgBxB,EAD9B,EAC8BA,OAAQyB,EADtC,EACsCA,UACvCC,EAAiB1B,EAAO2B,OAAQC,GAC7BA,EAAMnC,KAAKoC,cAAcC,SAASP,EAAYM,gBAGvD,OAAOJ,EACL,yCAEA,yBAAK7B,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAckB,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxB,OAAQ0B,OAObK,kBAzCUC,IAChB,CACLT,YAAaS,EAAMC,aAAaV,YAChCvB,OAAQgC,EAAME,cAAclC,OAC5ByB,UAAWO,EAAME,cAAcT,UAC/BU,MAAOH,EAAME,cAAcC,QAIHC,IACnB,CACLZ,eAAiBa,GAAUD,ECdD,CAC5B7B,KCRiC,sBDSjC+B,QDYqDD,EAAME,OAAOC,QAChEnB,gBAAiB,IAAMe,ECViBA,IAC1CA,EAAS,CAAE7B,KCXyB,2BDYpCkC,MAAM,8CACHC,KAAMC,GAAaA,EAASC,QAC5BF,KAAMG,GAAST,EAAS,CAAE7B,KCbO,yBDauB+B,QAASO,KACjEC,MAAOX,GACNC,EAAS,CAAE7B,KCdoB,wBDcS+B,QAASH,SDiCxCJ,CAA6Cd,GG5CtD8B,EAAqB,CACzBxB,YAAa,IAaTyB,EAAqB,CACzBvB,WAAW,EACXzB,OAAQ,GACRmC,MAAO,ICbHc,G,MAASC,0BAETC,EAAcC,YAAgB,CAAEnB,aDFV,CAACD,EAAQe,EAAoBM,EAAS,MAEhE,OAAQA,EAAO9C,MACb,IDd+B,sBCe7B,OAAO+C,OAAOC,OAAO,GAAIvB,EAAO,CAAET,YAAa8B,EAAOf,UACxD,QACE,OAAON,ICJuCE,cDcvB,CAACF,EAAQgB,EAAoBK,EAAS,MACjE,OAAQA,EAAO9C,MACb,ID3BkC,yBC4BhC,OAAO+C,OAAOC,OAAO,GAAIvB,EAAO,CAAEP,WAAW,IAC/C,ID5BkC,yBC6BhC,OAAO6B,OAAOC,OAAO,GAAIvB,EAAO,CAC9BhC,OAAQqD,EAAOf,QACfb,WAAW,IAEf,IDhCiC,wBCiC/B,OAAO6B,OAAOC,OAAO,GAAIvB,EAAO,CAC9BG,MAAOkB,EAAOf,QACdb,WAAW,IAEf,QACE,OAAOO,MC5BPwB,EAAQC,YACZN,EACAO,YAAgBC,IAAiBV,IAG7BW,EAAcC,SAASC,eAAe,QAC5CC,IAASzC,OACP,kBAAC,IAAD,CAAUkC,MAAOA,GACf,kBAAC,EAAD,OAEFI,K","file":"static/js/main.63fad798.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Fragment } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    //Fragment <Fragment> </Fragment> or <> </>\r\n    <Fragment>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"800px\" }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return isPending ? (\r\n      <h1>Loading..</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = (dispatch) => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  //console.log(action.type);\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddelware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddelware, logger)\n);\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}